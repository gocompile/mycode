package com.lhl.spider;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import net.sf.json.JSONObject;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.log4j.Logger;
import org.htmlcleaner.HtmlCleaner;
import org.htmlcleaner.TagNode;

import com.lhl.dao.ArticleDao;
import com.lhl.entity.Article;
import com.lhl.util.Constant;
import com.lhl.util.DrowImage;
import com.lhl.util.StringUtil;

/**
 * 
 * 鐖櫕閫氱敤绫�
 * 
 * @author prestlhh
 * @since 2012-10-06
 * @version 1.0
 */
public class Spider
{
	public static final int width = 700;

	public static final int height = 700;

	public static final int small_width = 150;

	public static final int small_height = 150;

	/**
	 * 鏃ュ織瀹炰緥
	 */
	private static Logger log = Logger.getLogger(Spider.class);

	/**
	 * http瀹㈡埛绔疄渚�
	 */
	private static DefaultHttpClient httpclient = new DefaultHttpClient();

	/**
	 * 
	 * 浠庣硹浜嬬櫨绉戣幏鍙杊tml(椤甸潰缂栫爜鏄痷tf-8)
	 * 
	 * @param 椤甸潰url
	 * @return 杩斿洖鐨刪tml鍐呭
	 * 
	 */
	public static String getQiushibaikeHTML(String url) throws ClientProtocolException, IOException
	{

		HttpGet httpGet = new HttpGet(url);
		httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
		httpGet.addHeader("Accept-Language", "zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3");
		httpGet.addHeader("Connection", "Keep-Alive");
		httpGet.addHeader("Host", "www.qiushibaike.com");
		httpGet.addHeader("Referer", "http://www.qiushibaike.com");
		httpGet.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 5.1; rv:15.0) Gecko/20100101 Firefox/15.0.1");
		HttpResponse response = httpclient.execute(httpGet);
		InputStream in = response.getEntity().getContent();
		String html = convertStreamToString(in, "utf-8");
		return html;
	}

	/**
	 * 
	 * 浠庡搱鍝圡X鑾峰彇html(椤甸潰缂栫爜鏄痷tf-8)
	 * 
	 * @param 椤甸潰url
	 * @return 杩斿洖鐨刪tml鍐呭
	 * 
	 */
	public static String getHahamxHTML(String url) throws ClientProtocolException, IOException
	{

		HttpGet httpGet = new HttpGet(url);
		httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
		httpGet.addHeader("Accept-Language", "zh-cn,zh;q=0.5");
		httpGet.addHeader("Connection", "Keep-Alive");
		httpGet.addHeader("Host", "www.haha.mx");
		httpGet.addHeader("cookie", "MAXAUTH=NO");
		httpGet.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 5.1; rv:15.0) Gecko/20100101 Firefox/15.0.1");
		HttpResponse response = httpclient.execute(httpGet);
		InputStream in = response.getEntity().getContent();
		String html = convertStreamToString(in, "utf-8");
		return html;
	}

	/**
	 * 
	 * 浠庢崸鑵圭綉鑾峰彇html(椤甸潰缂栫爜鏄痝bk)
	 * 
	 * @param 椤甸潰url
	 * @return 杩斿洖鐨刪tml鍐呭
	 * 
	 */
	public static String getPengfuHTML(String url) throws ClientProtocolException, IOException
	{

		HttpGet httpGet = new HttpGet(url);
		httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
		httpGet.addHeader("Accept-Language", "zh-cn,zh;q=0.5");
		httpGet.addHeader("Connection", "Keep-Alive");
		httpGet.addHeader("Host", "www.pengfu.com");
		httpGet.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 5.1; rv:15.0) Gecko/20100101 Firefox/15.0.1");
		HttpResponse response = httpclient.execute(httpGet);
		InputStream in = response.getEntity().getContent();
		String html = convertStreamToString(in, "gbk");
		return html;
	}

	/**
	 * 涓轰簡灏咺nputStream杞崲鎴怱tring鎴戜滑浣跨敤鍑芥暟BufferedReader.readLine().
	 * 鎴戜滑杩唬璋冪敤BufferedReader鐩村埌鍏惰繑鍥瀗ull, null鎰忓懗鐫�病鏈夊叾浠栫殑鏁版嵁瑕佽鍙栦簡.
	 * 姣忎竴琛屽皢浼氳拷鍔犲埌StringBuilder鐨勬湯灏� StringBuilder灏嗕綔涓篠tring杩斿洖銆�
	 * 
	 * @param 杈撳叆娴�
	 * @param 瀛楃缂栫爜
	 * @return 缂栫爜鍚庣殑瀛楃涓�
	 */
	public static String convertStreamToString(InputStream is, String charset) throws UnsupportedEncodingException
	{

		BufferedReader reader = new BufferedReader(new InputStreamReader(is, charset));
		StringBuilder sb = new StringBuilder();
		String line = null;
		try
		{
			while ((line = reader.readLine()) != null)
			{
				sb.append(line + "\n");
			}
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				is.close();
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
		}
		return sb.toString();
	}

	/**
	 * 浠庣硹浜嬬櫨绉慼tml涓幏鍙朼rticle瀵硅薄闆嗗悎
	 * 
	 * @param html
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Article> getQiushibaikeContent(String html)
	{

		List<Article> list = new ArrayList<Article>();
		HtmlCleaner htmlCleaner = new HtmlCleaner();
		TagNode allNode = htmlCleaner.clean(html);
		List<TagNode> objList = allNode.getElementListByAttValue("class", "block untagged", true, true);
		/*  涓嶇敤鑾峰彇鎬婚〉鏁帮紝鎶撳彇鐨勯〉鏁颁粠鍓嶇浼犺繃鏉�
		// 鎬婚〉鏁�
		TagNode pageNode = allNode.findElementByAttValue("class", "pagebar", true, true);
		List<TagNode> linkList = pageNode.getChildTagList();
		int totalPage = 0;
		for (TagNode link : linkList)
		{
			String pageNumber = link.getText().toString();
			if (pageNumber != null && pageNumber.matches("[0-9]+"))
			{
				totalPage = Math.max(totalPage, Integer.parseInt(pageNumber));
			}
		}*/
		for (TagNode obj : objList)
		{
			try
			{
				String id = obj.getAttributeByName("id");
				if (id == null)
				{
					continue;
				}
				// 鏋勯�Article瀵硅薄
				Article article = new Article();
				// 璁剧疆鏉ユ簮涓虹硹浜嬬櫨绉�
				article.setSourceFrom("Q");
				// articleId
				String articleId = id.substring(id.lastIndexOf("_") + 1);
				// 璁剧疆鏉ユ簮ID(鏉ユ簮+articleId)
				article.setSourceId("Q" + articleId);
				// 濂借瘎
				TagNode up = allNode.findElementByAttValue("id", "up-" + articleId, true, true);
				int upCount = Integer.parseInt(String.valueOf(up.getText()));
				article.setUp(upCount);
				// 宸瘎
				TagNode dn = allNode.findElementByAttValue("id", "dn-" + articleId, true, true);
				// 鍙栫粷瀵瑰�
				article.setDown(Math.abs(Integer.parseInt(String.valueOf(dn.getText()))));
				// content 鍐呭鑺傜偣
				TagNode ct = obj.findElementByAttValue("class", "content", true, true);
				// 鍙戝竷鏃堕棿
				String time = String.valueOf(ct.getAttributeByName("title"));
				if (upCount <= Constant.MIN_UP_COUNT)
				{
					return list;
				}
				// 鍐呭
				String content = String.valueOf(ct.getText()).trim();
				// 鍙戝竷鏃堕棿
				article.setPostTime(time);
				// 鏉ユ簮鏃堕棿
				article.setSourceTime(time);
				// 鍐呭
				article.setContent(content);
				// imgURL 鍥剧墖
				TagNode thumbNode = obj.findElementByAttValue("class", "thumb", true, true);
				if (thumbNode != null)
				{
					TagNode imgNode = thumbNode.findElementByName("img", true);
					if (imgNode != null)
					{
						String imgUrl = String.valueOf(imgNode.getAttributeByName("src")).trim();
						article.setImgUrl(imgUrl);
					}
				}
				// tags 鏍囩
				TagNode tagsNode = obj.findElementByAttValue("class", "tags", true, true);
				String tagStr = "";
				if (tagsNode != null)
				{
					List<TagNode> tags = tagsNode.getElementListByName("a", true);
					for (int i = 0; i < tags.size(); i++)
					{
						TagNode tagNode = tags.get(i);
						if (i == 0)
						{
							tagStr = String.valueOf(tagNode.getText()).trim();
						}
						else
						{
							tagStr = tagStr + "," + String.valueOf(tagNode.getText()).trim();
						}
					}
				}
				// 璁剧疆tag
				article.setTag(tagStr);
				list.add(article);
			}
			catch (Exception e)
			{
				e.printStackTrace();
				continue;
			}
		}
		return list;
	}

	/**
	 * 浠庡搱鍝圡X椤礹tml涓幏鍙朼rticle瀵硅薄闆嗗悎
	 * 
	 * @param html
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Article> getHahamxContent(String html)
	{

		List<Article> list = new ArrayList<Article>();
		HtmlCleaner htmlCleaner = new HtmlCleaner();
		TagNode allNode = htmlCleaner.clean(html);
		List<TagNode> objList = allNode.getElementListByAttValue("class", "item", true, true);
		/*// 鎬婚〉鏁�
		TagNode pageNode = allNode.findElementByAttValue("class", "paging", true, true);
		List<TagNode> linkList = pageNode.getElementListByName("a", true);
		int totalPage = 0;
		for (TagNode link : linkList)
		{
			String pageNumber = link.getText().toString();
			if (pageNumber != null && pageNumber.matches("[0-9]+"))
			{
				totalPage = Math.max(totalPage, Integer.parseInt(pageNumber));
			}
		}
		*/
		for (TagNode tag : objList)
		{
			try
			{
				String id = tag.getAttributeByName("id");
				if (id == null)
				{
					continue;
				}
				// 鏋勯�Article瀵硅薄
				Article article = new Article();
				// 璁剧疆鏉ユ簮涓哄搱鍝圡X
				article.setSourceFrom("H");
				String articleId = id.substring(id.lastIndexOf("-") + 1);
				// 璁剧疆鏉ユ簮ID(鏉ユ簮+articleId)
				article.setSourceId("H" + articleId);
				TagNode up = allNode.findElementByAttValue("id", "good-number-" + articleId, true, true);
				int upCount = Integer.parseInt(String.valueOf(up.getText()).trim());
				// 鏍规嵁椤剁殑鏁伴噺鍒ゆ柇
				if (upCount <= Constant.MIN_UP_COUNT)
				{
					return list;
				}
				article.setUp(upCount);
				TagNode dn = allNode.findElementByAttValue("id", "bad-number-" + articleId, true, true);
				article.setDown(Integer.parseInt(String.valueOf(dn.getText()).trim()));
				TagNode context = allNode.findElementByAttValue("id", "listText-" + articleId, true, true);
				// 鍐呭
				String content = String.valueOf(context.getText()).trim();
				// 鍐呭
				article.setContent(content);
				TagNode pic = allNode.findElementByAttValue("id", "list-pic-" + articleId, true, true);
				if (pic != null)
				{
					String imgURL = "http://image.haha.mx/" + pic.getAttributeByName("path") + "middle/"
							+ pic.getAttributeByName("pic_name");
					article.setImgUrl(imgURL);
				}
				TagNode tn = tag.findElementByAttValue("class", "infor-text", true, true);
				List<TagNode> tns = tn.getElementListByName("span", true);
				for (TagNode time : tns)
				{
					if (time.getText().toString().indexOf("鍙戝竷") != -1)
					{
						String pubTime = time.getText().toString();
						String postTime = pubTime.substring(0, 19);
						// 鍙戝竷鏃堕棿
						article.setPostTime(postTime);
						// 鏉ユ簮鏃堕棿
						article.setSourceTime(postTime);
						break;
					}
				}
				TagNode tagList = tag.findElementByAttValue("class", "tag", true, true);
				String tagStr = "";
				if (tagList != null)
				{
					List<TagNode> tags = tagList.getElementListByName("a", true);
					for (int i = 0; i < tags.size(); i++)
					{
						TagNode tagNode = tags.get(i);
						if (i == 0)
						{
							tagStr = String.valueOf(tagNode.getText()).trim();
						}
						else
						{
							tagStr = tagStr + "," + String.valueOf(tagNode.getText()).trim();
						}
					}
				}
				// 璁剧疆tag
				article.setTag(tagStr);
				// 璁剧疆椤垫暟
				list.add(article);
			}
			catch (Exception e)
			{
				log.error("浠庡搱鍝圡X鏋勯�article鍑洪敊..." + e.getMessage());
				continue;
			}
		}
		return list;
	}

	/**
	 * 浠庢崸鑵归〉html涓幏鍙朼rticle瀵硅薄闆嗗悎
	 * 
	 * @param html
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Article> getPengfuContent(String html)
	{

		List<Article> list = new ArrayList<Article>();
		HtmlCleaner htmlCleaner = new HtmlCleaner();
		TagNode allNode = htmlCleaner.clean(html);
		List<TagNode> objList = allNode.getElementListByAttValue("class", "post", true, true);
		/*		// 鎬婚〉鏁�
				TagNode pageNode = allNode.findElementByAttValue("class", "page", true, true);
				List<TagNode> linkList = pageNode.getElementListByName("a", true);
				int totalPage = 0;
				for (TagNode link : linkList)
				{
					String href = link.getAttributeByName("href");
					String pageNumber = href.substring(href.indexOf("index_") + 6, href.indexOf(".html"));
					if (pageNumber != null && pageNumber.matches("[0-9]+"))
					{
						totalPage = Math.max(totalPage, Integer.parseInt(pageNumber));
					}
				}*/
		for (TagNode tag : objList)
		{
			try
			{
				TagNode obj = tag.findElementByAttValue("class", "bdshare_t bds_tools get-codes-bdshare", true, true);
				if (obj == null)
				{
					continue;
				}
				String data = obj.getAttributeByName("data");
				JSONObject json = JSONObject.fromObject(data);
				String url = json.getString("url").trim();
				// 鏋勯�Article瀵硅薄
				Article article = new Article();
				// 璁剧疆鏉ユ簮涓烘崸鑵�
				article.setSourceFrom("P");
				String articleId = url.substring(url.indexOf("indexid_") + 8, url.indexOf(".html"));
				// 璁剧疆鏉ユ簮ID
				article.setSourceId("P" + articleId);
				TagNode picText = tag.findElementByAttValue("class", "pic_text", true, true);
				TagNode picNode = picText.findElementByName("img", true);
				if (picNode != null)
				{
					String pic = picNode.getAttributeByName("src");
					if (pic == null || "".equals(pic.trim()))
					{
						continue;
					}
					article.setImgUrl(pic);
				}
				else
				{
					continue;
				}
				TagNode timeTn = tag.findElementByAttValue("class", "time", true, true);
				String time = String.valueOf(timeTn.getText()).trim();
				TagNode h4 = tag.findElementByName("h4", true);
				TagNode contentTag = h4.findElementByName("a", true);
				// 鍐呭
				String content = String.valueOf(contentTag.getText()).trim();
				// 鍐呭
				article.setContent(content);
				TagNode up = allNode.findElementByAttValue("id", "span_SupportNum" + articleId, true, true);
				int upCount = Integer.parseInt(String.valueOf(up.getText()).trim());
				article.setUp(upCount);
				if (upCount <= Constant.MIN_UP_COUNT)
				{
					return list;
				}
				if (time != null && !"".equals(time))
				{
					time += ":00";
					// 闀挎暣鍨嬬殑鏉ユ簮鏃堕棿
					article.setPostTime(time);
					article.setSourceTime(time);
				}
				TagNode dn = allNode.findElementByAttValue("id", "span_OpposeNum" + articleId, true, true);
				article.setDown(Integer.parseInt(String.valueOf(dn.getText()).trim()));
				// tag
				TagNode tagList = allNode.findElementByAttValue("id", "divTagHtml_" + articleId, true, true);
				String tagStr = "";
				if (tagList != null)
				{
					List<TagNode> tags = tagList.getElementListByName("a", true);
					for (int i = 0; i < tags.size(); i++)
					{
						TagNode tagNode = tags.get(i);
						String tmp = String.valueOf(tagNode.getText()).trim();
						if (i == 0)
						{
							tagStr = tmp;
						}
						else
						{
							tagStr = tagStr + "," + tmp;
						}
					}
				}
				// 璁剧疆tag
				article.setTag(tagStr);
				// 璁剧疆椤垫暟
				list.add(article);
			}
			catch (Exception e)
			{
				log.error("浠庢崸鑵归〉鏋勯�article鍑洪敊..." + e.getMessage());
				continue;
			}
		}
		return list;
	}

	/**
	 * 
	 * @param list
	 * @param bigPath
	 * @param smallPath
	 */
	public static int addToBataBase(List<Article> list, String bigPath, String smallPath)
	{

		int count = 0;
		for (Article article : list)
		{
			if (StringUtil.isNotEmpty(article.getImgUrl()))
			{
				String sourceArticleId = article.getSourceId();
				String imgURL = article.getImgUrl();
				//濡傛灉鍥剧墖鎶撳彇澶辫触锛屽氨鍙栦笅涓�潯
				try
				{
					String realImgUrl = getHtmlPicture(sourceArticleId, imgURL, bigPath, smallPath);
					if (null == realImgUrl)//璺緞涓簄ull 璇存槑鍥剧墖澶ぇ      
					{
						continue;
					}
					article.setImgUrl(realImgUrl);
				}
				catch (Exception e)
				{
					e.printStackTrace();
					continue;
				}
			}
			article.setStatus(Constant.STATUS_Y);
			String sourceTime = article.getSourceTime();
			article.setSourceTime(sourceTime);
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			//濡傛灉鏃堕棿杞崲澶辫触 鍙戝竷鏃堕棿灏卞彇鏉ユ簮鏃堕棿
			try
			{
				long time = dateFormat.parse(sourceTime).getTime();
				int random = (int) (Math.random() * 1000000);
				time = time - random;
				String postTime = dateFormat.format(new Date(time));
				article.setPostTime(postTime);
			}
			catch (Exception e)
			{
				article.setPostTime(sourceTime);
			}
			//娣诲姞鍒版暟鎹簱锛屽鏋滄湁寮傚父灏辩户缁笅涓�潯銆�
			try
			{
				ArticleDao.getInstance().addArticle(article);
			}
			catch (Exception e)
			{
				continue;
			}
			count++;
		}
		return count;
	}

	public static String getMaxSourceTime(String sourceFrom)
	{

		String sourceTime = ArticleDao.getInstance().queryMaxSourceTime(sourceFrom);
		return sourceTime;
	}

	/**
	 * 
	 * @param sourceArticleId
	 * @param httpUrl
	 * @param bigPath
	 * @param smallPath
	 * @return
	 * @throws Exception 
	 */
	private static String getHtmlPicture(String sourceArticleId, String httpUrl, String bigPath, String smallPath)
			throws Exception
	{

		URL url;
		InputStream in;
		OutputStream out;
		String imgName = "";
		Calendar calendar = Calendar.getInstance();
		int year = calendar.get(Calendar.YEAR);
		int month = calendar.get(Calendar.MONTH) + 1;
		int day = calendar.get(Calendar.DAY_OF_MONTH);
		sourceArticleId = StringUtil.encodeByMD5(sourceArticleId);
		try
		{
			String type = httpUrl.substring(httpUrl.lastIndexOf("."));
			String bigDirPath = bigPath + "/" + year + "/" + month + "/" + day;
			File bigDir = new File(bigDirPath);
			if (!bigDir.exists())
			{
				bigDir.mkdirs();
			}
			String bigFilePath = bigDirPath + "/" + sourceArticleId + type;// 鍥剧墖瀛樺偍鐨勪綅缃�

			String smallDirPath = smallPath + "/" + year + "/" + month + "/" + day;
			File smallDir = new File(smallDirPath);
			if (!smallDir.exists())
			{
				smallDir.mkdirs();
			}
			String samllFilePath = smallDirPath + "/" + sourceArticleId + type;

			imgName = year + "/" + month + "/" + day + "/" + sourceArticleId + type;

			url = new URL(httpUrl);
			in = url.openStream();
			File file = new File(bigFilePath);
			out = new FileOutputStream(file);
			int len = 0;
			byte[] b = new byte[1024 * 5];
			while ((len = in.read(b)) != -1)
			{
				out.write(b, 0, len);
			}
			out.flush();
			out.close();
			in.close();
			if (file.length() > 1024 * 1024)
			{//濡傛灉鍥剧墖澶у皬瓒呰繃1M 灏变笉瑕佸浘鐗囦簡銆�
				file.delete();
				return null;
			}
			DrowImage.saveImageAsJpg(bigFilePath, samllFilePath, small_width, small_height);
		}
		catch (Exception e)
		{
			System.out.println(httpUrl + ".............");
			e.printStackTrace();
			throw e;
		}
		return imgName;
	}
}
